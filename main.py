import contextlib

from aiogram import Bot, Dispatcher, F
import asyncio
import logging
from dotenv import load_dotenv
import os
from aiogram.filters import Command
from handlers.joinuser import approve_request, approve_user, object_message
from handlers.admin.messenger import start_create, create_mailing, mailing_list_launch
from utils.database import Database
from state.sendler import Messenger
from filters.CheckAdmin import CheckAdmin
from utils.commands import set_commands

load_dotenv()

#–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª–∞ env (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
load_dotenv()

#–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –±–æ—Ç–∞
token = os.getenv('BOT_TOKEN')

#chat_id –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
admin_id = os.getenv('ADMIN_ID')

#—ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=token, parse_mode='HTML')

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

#–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()


CHANNEL_ID = -1002096606551

logging.basicConfig(level=logging.INFO, filename="py_log.log",filemode="w")
logging.debug("A DEBUG Message")
logging.info("An INFO")
logging.warning("A WARNING")
logging.error("An ERROR")
logging.critical("A message of CRITICAL severity")





# –í—ã–∑–æ–≤—ã handlers


# –í—ã–≤–æ–¥ –æ–±—ä–µ–∫—Ç–∞ message
dp.message.register(object_message, Command(commands='message'))
dp.chat_join_request.register(approve_request)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏
dp.message.register(approve_user, F.text == 'ü¶ä')
dp.message.register(approve_user, F.text == 'üêª')
dp.message.register(approve_user, F.text == 'ü¶Å')

# –†–∞—Å—Å—ã–ª–∫–∞
dp.message.register(start_create, Command(commands='messanger'), CheckAdmin())
dp.message.register(create_mailing, Messenger.messtext)

#–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
dp.message.register(mailing_list_launch, Command(commands='starter'), CheckAdmin())




async def start():
    await set_commands(bot)
    db = Database(os.getenv('DATABASE_NAME'))
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(start())



